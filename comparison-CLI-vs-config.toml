today within the parity channel, the question came up, which configuration setup 
could provide more advantages than others-
to assure, there are just this two

wether 

parity (and how it should run, could become a very long string of parameters) CLI

or 

parity with config.toml (file oriented)

there are several advantages which are worth to be named in detail:
command-line (cli)
-fast testing from console, errors during start are "thrown" directly onto the screen
-fast improvement of parameters, longs strings to type, possibily to reproduce any command
-fast response from parity, working or not, STRG+C works but needs little time
-"stressy" to navigate (to find) to the parity bin directory
-long strings, tend to bring confusion
-easier "feedback" on changed parameters within a shorter persiod of time

config-file (config.toml)
-file based, easy to find and to edit, with simplest text-editors
-just once loaded, during start, no changes to program parity after saving until restart
-one-click-button"yes-start-parity" possible within apple,win,linux
-much more details than command line tool with more confort to edit (i like to get the config-generator back btw :wink:
-on simplest errors within the config.toml parity cannot start->which confuses most users, like me about 10 months ago
-easy to "whitespace" a config line with placing a simple # and to retest again

 
whereas i don not develop the software now, 
nor i plan to reprogram/reduce parity to my needs,
it is decisive to know, that any version changes on parity can bring a working config from working-
by single sign-
then the testing for the matching parameters will often be done in greater hurry,
which can lead to higher frustration at lowered security level.

as auto-update is activated and you use a toml file-
be always aware of the config- options and whilest parity cannot start some time,

so,

if any time parity auto-downloaded the latest version (if set so)
and it seems as if it does not start again (after stopping)
it is a great "chance" and time for re"testing" an configuration, 
(as i do so i declare additions and reductions and when they came "in"-just to remember)
which is running matching your individual needs.
